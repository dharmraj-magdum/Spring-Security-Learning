
//Session management
by default spring security have a session management by cookie
cookies - JSESSIONID , we can configure it if we want
after first successful login attempt, spring security add cookie to response
with JSESSIONID eg value "FDB8FF97D71E39CE6F08E3283EE2F8E4"
subsequent req wont need to send the credentials if we send this cookie with req


//OAUTH2 using spring security & social logins
first we need to create/make a client account in social identity providers like facebook and gitHub
that Client have Id and secret using that we can connect to those provides via Client
that Client holds info regarding access our site needed, what and how etc.
in project config files, we just have to mention the bean of ClientRegistrationRepository
meaning we're instructing the oauth lib to consider these client/social login available in our appln
use then for login and etc, the spring security will take care of everything
/*@Bean
    ClientRegistrationRepository clientRegistrationRepository() {
        ClientRegistration github = githubClientRegistration();
        ClientRegistration facebook = facebookClientRegistration();
        return new InMemoryClientRegistrationRepository(github, facebook);
    }

    private ClientRegistration githubClientRegistration() {
        return CommonOAuth2Provider.GITHUB.getBuilder("github").clientId("Ov23liCBLLUjii41pS7k")
                .clientSecret("9da8734b56aad52d91b268fe6834a8df12447d95").build();
    }

    private ClientRegistration facebookClientRegistration() {
        return CommonOAuth2Provider.FACEBOOK.getBuilder("facebook").clientId("974042741122392")
                .clientSecret("36d48c25c1767d58b3101551513d7e1e").build();
    }*/

//IMP - This cannot be completely implemented in normal REST apis as we dont owe the data in these social logins
 so we cannot change or modify user details, hence cannot authorize according to roles and etc

//Authorization Server
KeyClock is open source Authorization Server,
we can run the server how we want and crate Clients with Grant type which ever we want
For user Authentication our spring app relies solely on the Jwt given to us.
we validate the token and extract the user details from it that's it.
all other things like user registration, roles etc are taken care by the auth server.
First the user need to get toke from server, passing the Client id and secret , then will receive token as per the Grant type

changes for using diff Auth server like our own server
Not major changes are required as both the servers works in OAuth2
1)change the jwk-uri in properties as it used by JWT lib to decode the JWT
2)Check if the claims provided by the token, if there is change in claim need to change TokenValidatorFilter OR the Authority/RoleConverter bean
as it will add logic to authenticate and add authorities


/////----------------------------------











